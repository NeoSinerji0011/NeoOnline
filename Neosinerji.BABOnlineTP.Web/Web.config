<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />


    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
      <section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
      <section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
    </sectionGroup>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
  </configSections>

  <!--<system.diagnostics>
    <trace>
      <listeners>
        <add type="Microsoft.WindowsAzure.Diagnostics.DiagnosticMonitorTraceListener, Microsoft.WindowsAzure.Diagnostics, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="AzureDiagnostics">
          <filter type="" />
        </add>
      </listeners>
    </trace>
  </system.diagnostics>-->
  <connectionStrings>
    <!--<add name="BABOnlineContext" connectionString="Server=tcp:zawvf7yr7j.database.windows.net,1433;Database=BABOnlineTEST;User ID=NeosinerjiDBManager@zawvf7yr7j;Password=neo12345BAB;Trusted_Connection=False;Encrypt=True;Connection Timeout=400; MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" />-->
    <!--<add name="BABOnlineContext" connectionString="Server = tcp: neoonline.database.windows.net,1433; Initial Catalog = NeoOnline; Persist Security Info = False; User ID = NeosinerjiDBManager@neoonline; Password = NeoSnrj2017); MultipleActiveResultSets = True;          Encrypt = True; TrustServerCertificate = False; Connection Timeout = 400;" providerName="System.Data.SqlClient" />-->
    <!--<add name="BABOnlineContext" connectionString="Server = tcp: 88.247.127.91,1433; Initial Catalog = NOEdirneTest2022; Persist Security Info = False; User ID = NeosinerjiDBManager@neoonline; Password = NeoSnrj2017); MultipleActiveResultSets = True;          Encrypt = True; TrustServerCertificate = True; Connection Timeout = 400;" providerName="System.Data.SqlClient" />-->
	  <!--<add name="BABOnlineContext" connectionString="Server = tcp: neoonline.database.windows.net,1433; Initial Catalog = NeoOnline; Persist Security Info = False; User ID = NeosinerjiDBManager@neoonline; Password = NeoSnrj2017); MultipleActiveResultSets = True;Encrypt = True; TrustServerCertificate = False; Connection Timeout = 400;" providerName="System.Data.SqlClient" />-->
	  <add name="BABOnlineContext" connectionString="Server=QUANTUMXPS\QUANTUMSQL; Database=NeoOnline; user id=sa; password='Quantum'; Connection Timeout=3600;" providerName="System.Data.SqlClient" />
    

    <add name="StorageConnectionString" connectionString="DefaultEndpointsProtocol=https;AccountName=neoonlinestrg;AccountKey=wrM/Fs9YFcU5FQlVw7KiMtuY2nY6XsjvQ7SCB29qhK6i3jEcbH1r1NuP0zCm2r8IXun1kc4gAiYYqib4RW23ww==;EndpointSuffix=core.windows.net" />


  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="PreserveLoginUrl" value="true" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <!--<add key="reCaptchaPublicKey" value="6LdqiBQUAAAAAGZqci0ARyE-if9p2RiiaG5RFoZR" />
    <add key="reCaptchaPrivateKey" value="6LdqiBQUAAAAAOLVy0eCVkj-3uxrm8qrG4N-b0VW" />-->
    <!--<add key="reCaptchaPublicKey" value="6LeDiRQUAAAAALIaDC4gHvNZfAaYNHtzIBqW-pEe" />
    <add key="reCaptchaPrivateKey" value="6LeDiRQUAAAAACuAa2Yvx29kvPJAHwmnr6B7Bfa1" />-->
    <!--local test adresi-->
    <!--<add key="muhasebeaktarim"  value="http://localhost:45571/" />-->
    <!--canlı ortam adres-->
    <add key="muhasebeaktarim" value="http://neoonlinemuhasebeaktarim.azurewebsites.net" />
    <!--remote test ortam adresi-->
    <!--<add key="muhasebeaktarim"  value="http://neoonlinemuhasebeaktarim-test.azurewebsites.net/" />-->
  </appSettings>
  <system.web>
    <!--<globalization uiCulture="tr-TR" culture="tr-TR"/>-->
    <globalization uiCulture="auto" culture="auto" />
    <compilation debug="true" targetFramework="4.6.1" />
    <authentication mode="Forms">
      <!--<forms loginUrl="~/Account/TimeOut" timeout="6000" />-->
    </authentication>
    <!--<httpRuntime enableVersionHeader="false"/>-->
    <!--Cookie Security-->
    <httpCookies requireSSL="true" />
    <customErrors mode="Off"></customErrors>
    <pages>
      <namespaces>
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Optimization" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
    </pages>

    <sessionState mode="InProc" timeout="400"></sessionState>

    <!--NOT SUPPORTED ANYMORE. IF DISTRIBUTED SESSION PRESERVATION IS REQUIRED SOME OTHER SYSTEMS SHOULD BE USED-->
    <!--<sessionState mode="Custom" customProvider="AFCacheSessionStateProvider">
      -->
    <!--timeout="40"-->
    <!--
      <providers>
        <add name="AFCacheSessionStateProvider" type="Microsoft.Web.DistributedCache.DistributedCacheSessionStateStoreProvider, Microsoft.Web.DistributedCache" cacheName="default" dataCacheClientName="default" applicationName="Neosinerji.BABOnlineTP.Web" />
      </providers>
    </sessionState>-->

    <!--<caching>
      <outputCache defaultProvider="AFCacheOutputCacheProvider">
        <providers>
          <add name="AFCacheOutputCacheProvider" type="Microsoft.Web.DistributedCache.DistributedCacheOutputCacheProvider, Microsoft.Web.DistributedCache" cacheName="default" dataCacheClientName="default" applicationName="AFCacheOutputCache"/>
        </providers>
      </outputCache>
    </caching>-->
    <!--<processModel maxWorkerThreads="100" maxIoThreads="100" minWorkerThreads="50"/> -->
    <httpRuntime minFreeThreads="88" minLocalRequestFreeThreads="76" executionTimeout="3000" maxRequestLength="1100000" appRequestQueueLimit="5000" requireRootedSaveAsPath="true" shutdownTimeout="30" />

    <!--<caching>
      <outputCache defaultProvider="AFCacheOutputCacheProvider">
        <providers>
          <add name="AFCacheOutputCacheProvider" type="Microsoft.Web.DistributedCache.DistributedCacheOutputCacheProvider, Microsoft.Web.DistributedCache" cacheName="default" dataCacheClientName="default" applicationName="AFCacheOutputCache"/>
        </providers>
      </outputCache>
    </caching>--> 
  </system.web>
  <system.net>
    <connectionManagement>
      <add address="*" maxconnection="120" />
    </connectionManagement>
    <defaultProxy enabled="true" />
    <settings>
      <!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
      <!--<servicePointManager checkCertificateRevocationList="true"/>-->
    </settings>
  </system.net>
  <system.webServer>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="2147483648" />
      </requestFiltering>
    </security>
    <httpProtocol>
      <customHeaders>
        <remove name="X-Powered-By" />
      </customHeaders>
    </httpProtocol>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true" />
    <staticContent>
      <remove fileExtension=".svg" />
      <remove fileExtension=".eot" />
      <remove fileExtension=".woff" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
      <mimeMap fileExtension=".woff" mimeType="application/x-woff" />
    </staticContent>

    <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
  </system.webServer>
  <runtime> 
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="DotNetOpenAuth.AspNet" publicKeyToken="2780ccd10d57b246" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Azure.KeyVault.Core" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
      </dependentAssembly>

      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.6.5135.21930" newVersion="1.6.5135.21930" />
      </dependentAssembly>

      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.8.0" newVersion="2.0.8.0" />
      </dependentAssembly>
    </assemblyBinding>


    <!-- This prevents the Windows Event Log from frequently logging that HMAC1 is being used (when the other party needs it). -->
    <legacyHMACWarning enabled="0" />
    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
		     to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
		 -->
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="v11.0" />
      </parameters>
    </defaultConnectionFactory>
    <!--<providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
    </providers>-->
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="TravelServiceSoap">
          <security mode="Transport" />
        </binding>
        <binding name="TravelServiceSoap1" />
        <binding name="BasicHttpBinding_ITransfer">
          <security mode="Transport" />
        </binding>
        <binding name="BasicHttpsBinding_ITransfer">
          <security mode="Transport" />
        </binding>
        <binding name="BasicHttpBinding_ITransfer1" />
        <binding name="BasicHttpBinding_ITransfer2">
          <security mode="Transport" />
        </binding>
        <binding name="BasicHttpsBinding_ITransfer1">
          <security mode="Transport" />
        </binding>
        <binding name="BasicHttpBinding_ITransfer3" />
      </basicHttpBinding>
      <wsHttpBinding>
        <binding name="WSHttpBinding_IAxaExternalProduction">
          <security mode="Transport" />
        </binding>
      </wsHttpBinding>
    </bindings>
    <client>
      <endpoint address="https://appt.axasigorta.com.tr/AxaExternalProduction-Prod/AxaExternalProductionService.svc" binding="wsHttpBinding" bindingConfiguration="WSHttpBinding_IAxaExternalProduction" contract="ServiceReferenceAxaNew.IAxaExternalProduction" name="WSHttpBinding_IAxaExternalProduction">
        <identity>
          <servicePrincipalName value="&#xD;&#xA;          " />
        </identity>
      </endpoint>
      <endpoint address="https://galaksi.turknippon.com/appservice/travel.asmx" binding="basicHttpBinding" bindingConfiguration="TravelServiceSoap" contract="TurkNippon.TravelServiceSoap" name="TravelServiceSoap" />
      <endpoint address="https://apigw.raysigorta.com.tr/Transfer/Transfer.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_ITransfer" contract="ServiceReference1.ITransfer" name="BasicHttpBinding_ITransfer" />
      <endpoint address="https://apigw.raysigorta.com.tr/Transfer/Transfer.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpsBinding_ITransfer" contract="ServiceReference1.ITransfer" name="BasicHttpsBinding_ITransfer" />
      <endpoint address="https://apigw.raysigorta.com.tr/Transfer/Transfer.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_ITransfer2" contract="ServiceReference1.ITransfer" name="BasicHttpBinding_ITransfer1" />
      <endpoint address="https://apigw.raysigorta.com.tr/Transfer/Transfer.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpsBinding_ITransfer1" contract="ServiceReference1.ITransfer" name="BasicHttpsBinding_ITransfer1" />
    </client>
  </system.serviceModel>
  <dotNetOpenAuth>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
          <!--<add name="localhost" />-->
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
    <!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
    <reporting enabled="true" />
    <!-- This is an optional configuration section where aspects of dotnetopenauth can be customized. -->
    <!-- For a complete set of configuration options see http://www.dotnetopenauth.net/developers/code-snippets/configuration-options/ -->
    <openid>
      <relyingParty>
        <security requireSsl="false">
          <!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
          <!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
						<add endpoint="https://www.google.com/accounts/o8/ud" />
					</trustedProviders>-->
        </security>
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
					     with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty" />
        </behaviors>
      </relyingParty>
    </openid>
  </dotNetOpenAuth>
  <uri>
    <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
		     which is necessary for OpenID urls with unicode characters in the domain/host name.
		     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
    <idn enabled="All" />
    <iriParsing enabled="true" />
  </uri>

</configuration>
